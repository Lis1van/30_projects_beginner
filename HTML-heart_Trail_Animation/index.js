const bodyEl = document.querySelector('body');

// ### Переменная `bodyEl`
//
// - `const bodyEl = document.querySelector('body');`: Эта строка кода выбирает элемент `<body>` в документе и
// сохраняет его в переменную `bodyEl`. Мы будем использовать эту переменную для добавления новых элементов на страницу
// и для управления ими.
//
bodyEl.addEventListener('mousemove', (event) => {
//
// ### Слушатель события `mousemove`
//
// - `bodyEl.addEventListener('mousemove', (event) => { ... });`: Эта строка добавляет слушатель события `mousemove`
// к элементу `<body>`. Каждый раз, когда мышь движется внутри элемента `<body>`, вызывается анонимная функция-обработчик,
// которой передается объект `event`. Этот объект содержит информацию о событии, включая координаты курсора.
//
    const xPos = event.offsetX;
    const yPos = event.offsetY;
//
// ### Координаты курсора
//
// - `const xPos = event.offsetX;`: Получает горизонтальную координату курсора относительно элемента,
// на котором произошло событие (в данном случае это `<body>`). `offsetX` - это свойство объекта `event`,
// которое указывает положение курсора по оси X относительно элемента, к которому привязано событие.
//
// - `const yPos = event.offsetY;`: Получает вертикальную координату курсора относительно элемента `<body>`.
// `offsetY` - это свойство, аналогичное `offsetX`, но по оси Y.
//
    const spanEl = document.createElement('span');
//
// ### Создание элемента `<span>`
//
// - `const spanEl = document.createElement('span');`: Создает новый элемент `<span>` и сохраняет ссылку на него в
// переменной `spanEl`. Этот элемент будет использоваться для отображения сердечка.
//
    spanEl.style.left = `${xPos}px`;
    spanEl.style.top = `${yPos}px`;
//
// ### Позиционирование элемента `<span>`
//
// - `spanEl.style.left = `${xPos}px`;`: Устанавливает горизонтальную позицию элемента `<span>` на странице,
// используя значение `xPos` (координата курсора). Значение задается в пикселях.
//
// - `spanEl.style.top = `${yPos}px`;`: Устанавливает вертикальную позицию элемента `<span>`,
// используя значение `yPos` (координата курсора). Значение задается в пикселях.
//
    const size = Math.random() * 100;
    spanEl.style.width = `${size}px`;
    spanEl.style.height = `${size}px`;
//
// ### Размер элемента `<span>`
//
// - `const size = Math.random() * 100;`: Генерирует случайное число от 0 до 100. Это значение будет использоваться
// для задания ширины и высоты элемента `<span>`, делая каждый сердечко уникальным по размеру.
//
// - `spanEl.style.width = `${size}px`;`: Устанавливает ширину элемента `<span>`, используя случайное значение `size`,
// преобразованное в строку с единицей измерения `px`.
//
// - `spanEl.style.height = `${size}px`;`: Устанавливает высоту элемента `<span>`, используя то же случайное значение `size`,
// чтобы сердечко было квадратным.
//
    bodyEl.appendChild(spanEl);
//
// ### Добавление элемента `<span>` в DOM
//
// - `bodyEl.appendChild(spanEl);`: Добавляет созданный элемент `<span>` в качестве дочернего элемента к `<body>`.
// Это приводит к тому, что сердечко становится видимым на странице.
//
    setTimeout(() => {
        spanEl.remove();
    }, 3000);
});
//
// ### Удаление элемента `<span>` через 3 секунды
//
// - `setTimeout(() => { ... }, 3000);`: Устанавливает таймер на 3000 миллисекунд (3 секунды).
// После этого времени вызывается анонимная функция, которая удаляет элемент `<span>`.
//
// - `spanEl.remove();`: Удаляет элемент `<span>` из DOM, очищая его после завершения анимации.
// Это предотвращает переполнение страницы элементами и экономит память браузера.
//
// ## Общий процесс
//
// 1. **Инициализация**: В начале мы выбираем элемент `<body>`, к которому будет прикреплен слушатель событий.
// 2. **Слушатель `mousemove`**: Каждый раз, когда мышь движется, код внутри обработчика события выполняется.
// 3. **Создание элемента**: Для каждого движения мыши создается новый элемент `<span>`.
// 4. **Позиционирование**: Элемент позиционируется на экране в месте, соответствующем текущему положению курсора.
// 5. **Размер**: Элемент получает случайный размер.
// 6. **Добавление в DOM**: Элемент добавляется в DOM, и он становится видимым на странице.
// 7. **Удаление**: Через 3 секунды элемент удаляется из DOM, чтобы предотвратить его накопление.
//
//     Этот код обеспечивает динамическое создание и анимацию сердечек, которые появляются и исчезают, следуя за курсором мыши, создавая эффект "следа сердечек".