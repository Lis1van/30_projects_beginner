// ### JavaScript Код
//
// Этот JavaScript код управляет интерактивностью веб-страницы с изображениями и кнопкой.
// Рассмотрим каждый блок кода и разберем, как он работает.
//
let imageNum = 0;
const imageContainerElement = document.querySelector('.image-container');
const btnElement = document.querySelector('.btn');
//
// #### Объявление переменных
//
// - **`const imageContainerElement = document.querySelector('.image-container');`**
// - Находит HTML-элемент с классом `image-container` и сохраняет его в переменную `imageContainerElement`.
// Этот элемент будет использоваться для добавления новых изображений.
//
// - **`const btnElement = document.querySelector('.btn');`**
// - Находит HTML-элемент с классом `btn` (кнопка) и сохраняет его в переменную `btnElement`.
// Эта переменная будет использоваться для привязки обработчика событий к кнопке.
//
btnElement.addEventListener('click', () => {
    imageNum = 10;
    addNewImages()
});
//
// #### Обработчик события клика
//
// - **`btnElement.addEventListener('click', () => { ... });`**
// - Добавляет обработчик события клика к кнопке. Когда пользователь кликает на кнопку, выполняется анонимная функция.
//
// - **`imageNum = 10;`**
// - Устанавливает количество новых изображений, которые будут добавлены, равным 10.
//
// - **`addNewImages();`**
// - Вызывает функцию `addNewImages`, которая добавляет новые изображения в контейнер.
//
// Эта функция добавляет новые изображения в контейнер изображений
function addNewImages() {
    // Проходим через заданное количество раз
    for (let index = 0; index < imageNum; index++) {
        // Создаем новый элемент изображения
        const newImgEl = document.createElement('img');
        // Генерируем случайное число
        const randomNum = Math.floor(Math.random() * 2000); // Генерируем случайное число **внутри** цикла
        // Устанавливаем источник изображения на случайный URL
        newImgEl.src = `https://picsum.photos/300?random=&${randomNum}`;
        // Добавляем новое изображение в контейнер изображений
        imageContainerElement.appendChild(newImgEl);
    }
}
//
// #### Функция добавления новых изображений
//
// - **`function addNewImages() { ... }`**
//   - Определяет функцию `addNewImages`, которая будет добавлять новые изображения в контейнер изображений.
//
// - **`for (let index = 0; index < imageNum; index++) { ... }`**
//   - Начинается цикл, который выполняется `imageNum` раз (в данном случае 10 раз). Это позволяет добавить 10 новых изображений.
//
// - **`const newImgEl = document.createElement('img');`**
//   - Создает новый элемент изображения (`<img>`).
//
// - **`const randomNum = Math.floor(Math.random() * 2000);`**
//   - Генерирует случайное целое число от 0 до 1999 (включительно). Это число будет использоваться для создания
//   уникального URL для каждого изображения, что гарантирует загрузку случайного изображения.
//
// - **`newImgEl.src = `https://picsum.photos/300?random=&${randomNum}`;`**
//   - Устанавливает атрибут `src` для нового элемента изображения, используя случайное число для формирования уникального URL.
//   URL загружает случайное изображение размером 300x300 пикселей из сервиса `picsum.photos`.
//
// - **`imageContainerElement.appendChild(newImgEl);`**
//   - Добавляет созданный элемент изображения (`newImgEl`) в конец контейнера изображений (`imageContainerElement`).
//   Это действие отображает новое изображение на странице.
//
// ### Общая концепция
//
// Этот код добавляет интерактивность на страницу с изображениями. При клике на кнопку создается и добавляется
// 10 новых изображений в контейнер.
//
// - **Основной механизм работы**:
//   - Обработчик события клика на кнопке вызывает функцию `addNewImages`.
//   - Функция `addNewImages` создает 10 новых элементов изображений и добавляет их в контейнер.
//   - Каждое изображение имеет уникальный URL, генерируемый случайным образом, что позволяет загружать случайные
//   изображения с помощью сервиса `picsum.photos`.
//
// ### Оптимизация
//
// Для улучшения этого кода можно рассмотреть следующие оптимизации:
//
// 1. **Использование `const` для неизменяемых переменных**:
//    - Переменные, значения которых не изменяются, могут быть объявлены с помощью `const`.
//
// 2. **Устранение потенциальных проблем с производительностью**:
//    - Если добавляется много изображений, это может замедлить работу страницы. Можно добавить ограничение на
//    максимальное количество изображений или использовать `IntersectionObserver` для ленивой загрузки изображений.
//
// 3. **Улучшение читаемости и обслуживания**:
//    - Перенести число `2000` в константу с понятным именем, например `MAX_RANDOM_NUM`, чтобы облегчить изменение этого значения в будущем.
//
// 4. **Более информативные имена переменных**:
//    - Переменные `imageNum`, `newImgEl` и `randomNum` можно переименовать в `numberOfImagesToAdd`, `newImageElement`
//    и `randomImageId` соответственно для повышения читаемости кода.